<?xml version="1.0"?>
<minder version="1.16.2" parent-etag="1336520149" etag="844668330">
  <theme name="default" label="Light" index="-1"/>
  <styles>
    <style level="0" isset="false" branchmargin="100" branchradius="25" linktype="straight" linkwidth="4" linkarrow="false" linkdash="solid" nodeborder="rounded" nodewidth="200" nodeborderwidth="4" nodefill="false" nodemargin="10" nodepadding="10" nodefont="Sans 11" nodemarkup="true" connectiondash="dotted" connectionlwidth="2" connectionarrow="fromto" connectionpadding="3" connectionfont="Sans 10" connectiontwidth="100" calloutfont="Sans 12" calloutpadding="5" calloutptrwidth="20" calloutptrlength="20"/>
    <style level="1" isset="false" branchmargin="100" branchradius="25" linktype="straight" linkwidth="4" linkarrow="false" linkdash="solid" nodeborder="underlined" nodewidth="200" nodeborderwidth="4" nodefill="false" nodemargin="8" nodepadding="6" nodefont="Sans 11" nodemarkup="true" connectiondash="dotted" connectionlwidth="2" connectionarrow="fromto" connectionpadding="3" connectionfont="Sans 10" connectiontwidth="100" calloutfont="Sans 12" calloutpadding="5" calloutptrwidth="20" calloutptrlength="20"/>
    <style level="2" isset="false" branchmargin="100" branchradius="25" linktype="straight" linkwidth="4" linkarrow="false" linkdash="solid" nodeborder="underlined" nodewidth="200" nodeborderwidth="4" nodefill="false" nodemargin="8" nodepadding="6" nodefont="Sans 11" nodemarkup="true" connectiondash="dotted" connectionlwidth="2" connectionarrow="fromto" connectionpadding="3" connectionfont="Sans 10" connectiontwidth="100" calloutfont="Sans 12" calloutpadding="5" calloutptrwidth="20" calloutptrlength="20"/>
    <style level="3" isset="false" branchmargin="100" branchradius="25" linktype="straight" linkwidth="4" linkarrow="false" linkdash="solid" nodeborder="underlined" nodewidth="200" nodeborderwidth="4" nodefill="false" nodemargin="8" nodepadding="6" nodefont="Sans 11" nodemarkup="true" connectiondash="dotted" connectionlwidth="2" connectionarrow="fromto" connectionpadding="3" connectionfont="Sans 10" connectiontwidth="100" calloutfont="Sans 12" calloutpadding="5" calloutptrwidth="20" calloutptrlength="20"/>
    <style level="4" isset="false" branchmargin="100" branchradius="25" linktype="straight" linkwidth="4" linkarrow="false" linkdash="solid" nodeborder="underlined" nodewidth="200" nodeborderwidth="4" nodefill="false" nodemargin="8" nodepadding="6" nodefont="Sans 11" nodemarkup="true" connectiondash="dotted" connectionlwidth="2" connectionarrow="fromto" connectionpadding="3" connectionfont="Sans 10" connectiontwidth="100" calloutfont="Sans 12" calloutpadding="5" calloutptrwidth="20" calloutptrlength="20"/>
    <style level="5" isset="false" branchmargin="100" branchradius="25" linktype="straight" linkwidth="4" linkarrow="false" linkdash="solid" nodeborder="underlined" nodewidth="200" nodeborderwidth="4" nodefill="false" nodemargin="8" nodepadding="6" nodefont="Sans 11" nodemarkup="true" connectiondash="dotted" connectionlwidth="2" connectionarrow="fromto" connectionpadding="3" connectionfont="Sans 10" connectiontwidth="100" calloutfont="Sans 12" calloutpadding="5" calloutptrwidth="20" calloutptrlength="20"/>
    <style level="6" isset="false" branchmargin="100" branchradius="25" linktype="straight" linkwidth="4" linkarrow="false" linkdash="solid" nodeborder="underlined" nodewidth="200" nodeborderwidth="4" nodefill="false" nodemargin="8" nodepadding="6" nodefont="Sans 11" nodemarkup="true" connectiondash="dotted" connectionlwidth="2" connectionarrow="fromto" connectionpadding="3" connectionfont="Sans 10" connectiontwidth="100" calloutfont="Sans 12" calloutpadding="5" calloutptrwidth="20" calloutptrlength="20"/>
    <style level="7" isset="false" branchmargin="100" branchradius="25" linktype="straight" linkwidth="4" linkarrow="false" linkdash="solid" nodeborder="underlined" nodewidth="200" nodeborderwidth="4" nodefill="false" nodemargin="8" nodepadding="6" nodefont="Sans 11" nodemarkup="true" connectiondash="dotted" connectionlwidth="2" connectionarrow="fromto" connectionpadding="3" connectionfont="Sans 10" connectiontwidth="100" calloutfont="Sans 12" calloutpadding="5" calloutptrwidth="20" calloutptrlength="20"/>
    <style level="8" isset="false" branchmargin="100" branchradius="25" linktype="straight" linkwidth="4" linkarrow="false" linkdash="solid" nodeborder="underlined" nodewidth="200" nodeborderwidth="4" nodefill="false" nodemargin="8" nodepadding="6" nodefont="Sans 11" nodemarkup="true" connectiondash="dotted" connectionlwidth="2" connectionarrow="fromto" connectionpadding="3" connectionfont="Sans 10" connectiontwidth="100" calloutfont="Sans 12" calloutpadding="5" calloutptrwidth="20" calloutptrlength="20"/>
    <style level="9" isset="false" branchmargin="100" branchradius="25" linktype="straight" linkwidth="4" linkarrow="false" linkdash="solid" nodeborder="underlined" nodewidth="200" nodeborderwidth="4" nodefill="false" nodemargin="8" nodepadding="6" nodefont="Sans 11" nodemarkup="true" connectiondash="dotted" connectionlwidth="2" connectionarrow="fromto" connectionpadding="3" connectionfont="Sans 10" connectiontwidth="100" calloutfont="Sans 12" calloutpadding="5" calloutptrwidth="20" calloutptrlength="20"/>
    <style level="10" isset="false" branchmargin="100" branchradius="25" linktype="straight" linkwidth="4" linkarrow="false" linkdash="solid" nodeborder="underlined" nodewidth="200" nodeborderwidth="4" nodefill="false" nodemargin="8" nodepadding="6" nodefont="Sans 11" nodemarkup="true" connectiondash="dotted" connectionlwidth="2" connectionarrow="fromto" connectionpadding="3" connectionfont="Sans 10" connectiontwidth="100" calloutfont="Sans 12" calloutpadding="5" calloutptrwidth="20" calloutptrlength="20"/>
  </styles>
  <images/>
  <nodes>
    <node id="0" posx="664.0078125" posy="499.244140625" width="219" height="70" side="left" fold="false" treesize="1235" summarized="false" layout="Horizontal" group="false">
      <style branchmargin="100" branchradius="25" linktype="curved" linkwidth="4" linkarrow="false" linkdash="longdash" nodeborder="underlined" nodewidth="200" nodeborderwidth="4" nodefill="false" nodemargin="8" nodepadding="6" nodefont="Sans 11" nodemarkup="true"/>
      <nodename maxwidth="200">
        <text data="**Using Pattern Matching with `switch`**"/>
      </nodename>
      <nodenote></nodenote>
      <nodes>
        <node id="1" posx="983.0078125" posy="-27.255859375" width="432" height="133" side="right" fold="false" treesize="245" color="#c6262e" colorroot="false" summarized="false" layout="Horizontal" group="false">
          <style branchmargin="100" branchradius="25" linktype="curved" linkwidth="4" linkarrow="false" linkdash="longdash" nodeborder="underlined" nodewidth="400" nodeborderwidth="4" nodefill="false" nodemargin="8" nodepadding="6" nodefont="Sans 11" nodemarkup="true"/>
          <nodename maxwidth="405.638671875">
            <text data="To use pattern matching with a `switch`, first start with an object reference variable. Any object reference type is permitted, provided the `switch` makes use of pattern matching. Next, in each case clause, define a type and pattern matching variable."/>
          </nodename>
          <nodenote></nodenote>
          <nodes>
            <node id="2" posx="1515.0078125" posy="-49.755859375" width="392" height="178" side="right" fold="false" treesize="245" color="#c6262e" colorroot="false" summarized="false" layout="Horizontal" group="false">
              <style branchmargin="100" branchradius="25" linktype="curved" linkwidth="4" linkarrow="false" linkdash="longdash" nodeborder="underlined" nodewidth="400" nodeborderwidth="4" nodefill="false" nodemargin="8" nodepadding="6" nodefont="Sans 11" nodemarkup="true"/>
              <nodename maxwidth="400">
                <text data="`void printDetails(_**Number**_ height) {&#10;  String message = switch (height) {&#10;  **case Integer i**-&gt; &quot;Rounded: &quot; + i;&#10;  **case Double d**-&gt; &quot;Precise: &quot; + d;&#10;  **case _Number_ n**-&gt; &quot;Unknown: &quot; + n;&#10;  };&#10;  System.out.print(message);&#10;}`"/>
              </nodename>
              <nodenote></nodenote>
              <nodes>
                <node id="3" posx="2007.0078125" posy="-48.255859375" width="428" height="175" side="right" fold="false" treesize="245" color="#c6262e" colorroot="false" summarized="false" layout="Horizontal" group="false">
                  <style branchmargin="100" branchradius="25" linktype="curved" linkwidth="4" linkarrow="false" linkdash="longdash" nodeborder="underlined" nodewidth="400" nodeborderwidth="4" nodefill="false" nodemargin="8" nodepadding="6" nodefont="Sans 11" nodemarkup="true"/>
                  <nodename maxwidth="400">
                    <text data="In this example, we output different values depending on&#10;the type of the `switch` variable. The same rules about local variables and flow scoping that we learned about earlier with pattern matching apply. For instance,_the pattern matching variable exists only within the `case` branch for which it is defined. This allows us to reuse the same name for two `case` branches._"/>
                  </nodename>
                  <nodenote></nodenote>
                  <nodes>
                    <node id="4" posx="2535.0078125" posy="-41.255859375" width="453" height="91" side="right" fold="false" treesize="175" color="#c6262e" colorroot="false" summarized="false" layout="Horizontal" group="false">
                      <style branchmargin="100" branchradius="25" linktype="curved" linkwidth="4" linkarrow="false" linkdash="longdash" nodeborder="underlined" nodewidth="423" nodeborderwidth="4" nodefill="false" nodemargin="8" nodepadding="6" nodefont="Sans 11" nodemarkup="true"/>
                      <nodename maxwidth="428.23828125">
                        <text data="Figure (256_figure_3_7.png) shows the structure of pattern matching with a `switch` expression.**It can also be used with a `switch` statement that does not return a value.**"/>
                      </nodename>
                      <nodenote></nodenote>
                      <nodes>
                        <node id="6" posx="3088.0078125" posy="-83.255859375" width="435" height="175" side="right" fold="false" treesize="175" color="#c6262e" colorroot="false" summarized="false" layout="Horizontal" group="false">
                          <style branchmargin="100" branchradius="25" linktype="curved" linkwidth="4" linkarrow="false" linkdash="longdash" nodeborder="underlined" nodewidth="423" nodeborderwidth="4" nodefill="false" nodemargin="8" nodepadding="6" nodefont="Sans 11" nodemarkup="true"/>
                          <nodename maxwidth="423">
                            <text data="From Figure, you might have noticed it includes a guard clause, which is an optional conditional clause that can be added to a `case` branch. This is similar to what we saw in  pattern matching if statement. The only difference is that with `switch`, the `when` keyword is required between the variable and the expression. The `when` statement comes before the general type."/>
                          </nodename>
                          <nodenote></nodenote>
                        </node>
                      </nodes>
                    </node>
                    <node id="5" posx="2535.0078125" posy="91.744140625" width="432" height="70" side="right" fold="false" treesize="70" color="#c6262e" colorroot="false" summarized="false" layout="Horizontal" group="false">
                      <style branchmargin="100" branchradius="25" linktype="curved" linkwidth="4" linkarrow="false" linkdash="longdash" nodeborder="underlined" nodewidth="423" nodeborderwidth="4" nodefill="false" nodemargin="8" nodepadding="6" nodefont="Sans 11" nodemarkup="true"/>
                      <nodename maxwidth="423">
                        <text data="Remembre:**Type matches `switch` variable reference type so `default` clause is not needed.**"/>
                      </nodename>
                      <nodenote></nodenote>
                    </node>
                  </nodes>
                </node>
              </nodes>
            </node>
          </nodes>
        </node>
        <node id="7" posx="983.0078125" posy="180.244140625" width="469" height="217" side="right" fold="false" treesize="254" color="#f37329" colorroot="false" summarized="false" layout="Horizontal" group="false">
          <style branchmargin="100" branchradius="25" linktype="curved" linkwidth="4" linkarrow="false" linkdash="longdash" nodeborder="underlined" nodewidth="471" nodeborderwidth="4" nodefill="false" nodemargin="8" nodepadding="6" nodefont="Sans 11" nodemarkup="true"/>
          <nodename maxwidth="473.091796875">
            <text data="Example:&#10;`String getTrainer(**Number** height) {&#10;  return switch (height) {&#10;    case Integer i**when i &gt; 10**-&gt;&quot;Joseph&quot;;&#10;    case Integer i -&gt; &quot;Daniel&quot;;&#10;    case Double num**when num &lt;= 15.5**-&gt;&quot;Peter&quot;;&#10;    case Double num -&gt; &quot;Kelly&quot;;&#10;    case **Number** num -&gt; &quot;Ralph&quot;;&#10;  };&#10;}`"/>
          </nodename>
          <nodenote></nodenote>
          <nodes>
            <node id="8" posx="1552.0078125" posy="190.744140625" width="467" height="196" side="right" fold="false" treesize="254" color="#f37329" colorroot="false" summarized="false" layout="Horizontal" group="false">
              <style branchmargin="100" branchradius="25" linktype="curved" linkwidth="4" linkarrow="false" linkdash="longdash" nodeborder="underlined" nodewidth="443" nodeborderwidth="4" nodefill="false" nodemargin="8" nodepadding="6" nodefont="Sans 11" nodemarkup="true"/>
              <nodename maxwidth="443">
                <text data="Note that what is in the `when` statement always comes first.&#10;`Joseph` works with the animal if the `height` is an `Integer` greater than `10`. `Daniel` is then selected for all other `Integer` values. Likewise, `Peter` handles all `Double`&#10;measurements less than or equal to `15.5`, while `Kelly`&#10;handles the remaining `Double` values. Finally, `Ralph` handles&#10;all animals that don&#x2019;t meet one of the previous requirements, such as if `Short` or `Long` was used."/>
              </nodename>
              <nodenote></nodenote>
              <nodes>
                <node id="9" posx="2119.0078125" posy="222.244140625" width="449" height="133" side="right" fold="false" treesize="254" color="#f37329" colorroot="false" summarized="false" layout="Horizontal" group="false">
                  <style branchmargin="100" branchradius="25" linktype="curved" linkwidth="4" linkarrow="false" linkdash="longdash" nodeborder="underlined" nodewidth="443" nodeborderwidth="4" nodefill="false" nodemargin="8" nodepadding="6" nodefont="Sans 11" nodemarkup="true"/>
                  <nodename maxwidth="443">
                    <text data="One advantage of guards is that now switch can do&#10;something it&#x2019;s never done before: it can handle ranges.&#10;Previously, if you wanted to support a range of values with&#10;a `switch`, you had to list all the possible `case` values. With the `when` clause, you can support range matches."/>
                  </nodename>
                  <nodenote></nodenote>
                  <nodes>
                    <node id="10" posx="2668.0078125" posy="161.744140625" width="457" height="112" side="right" fold="false" treesize="112" color="#f37329" colorroot="false" summarized="false" layout="Horizontal" group="false">
                      <style branchmargin="100" branchradius="25" linktype="curved" linkwidth="4" linkarrow="false" linkdash="longdash" nodeborder="underlined" nodewidth="443" nodeborderwidth="4" nodefill="false" nodemargin="8" nodepadding="6" nodefont="Sans 11" nodemarkup="true"/>
                      <nodename maxwidth="443">
                        <text data="**Applying Acceptable Types**&#10;One of the simplest rules when working with `switch` and&#10;pattern matching is that the type must be the same type as the `switch` variable or a subtype."/>
                      </nodename>
                      <nodenote></nodenote>
                    </node>
                    <node id="11" posx="2668.0078125" posy="273.744140625" width="469" height="142" side="right" fold="false" treesize="142" color="#f37329" colorroot="false" summarized="false" layout="Horizontal" group="false">
                      <style branchmargin="100" branchradius="25" linktype="curved" linkwidth="4" linkarrow="false" linkdash="longdash" nodeborder="underlined" nodewidth="443" nodeborderwidth="4" nodefill="false" nodemargin="8" nodepadding="6" nodefont="Sans 11" nodemarkup="true"/>
                      <nodename maxwidth="443">
                        <text data="`Number fish = 10;&#10;String name = switch (fish) {&#10;  case Integer freshWater -&gt; &quot;Bass&quot;;&#10;  case Number saltWater -&gt; &quot;ClownFish&quot;;&#10;  case**String s**-&gt; &quot;Shark&quot;; // DOES NOT COMPILE&#10;};`"/>
                      </nodename>
                      <nodenote></nodenote>
                      <nodes>
                        <node id="12" posx="3237.0078125" posy="299.244140625" width="306" height="91" side="right" fold="false" treesize="91" color="#f37329" colorroot="false" summarized="false" layout="Horizontal" group="false">
                          <style branchmargin="100" branchradius="25" linktype="curved" linkwidth="4" linkarrow="false" linkdash="longdash" nodeborder="underlined" nodewidth="324" nodeborderwidth="4" nodefill="false" nodemargin="8" nodepadding="6" nodefont="Sans 11" nodemarkup="true"/>
                          <nodename maxwidth="306.875">
                            <text data="The compiler is smart enough to know a `Number` can&#x2019;t be cast as a `String`, resulting in this code not compiling."/>
                          </nodename>
                          <nodenote></nodenote>
                        </node>
                      </nodes>
                    </node>
                  </nodes>
                </node>
              </nodes>
            </node>
          </nodes>
        </node>
        <node id="13" posx="983.0078125" posy="513.244140625" width="502" height="133" side="right" fold="false" treesize="328" color="#c6262e" colorroot="false" summarized="false" layout="Horizontal" group="false">
          <style branchmargin="100" branchradius="25" linktype="curved" linkwidth="4" linkarrow="false" linkdash="longdash" nodeborder="underlined" nodewidth="473" nodeborderwidth="4" nodefill="false" nodemargin="8" nodepadding="6" nodefont="Sans 11" nodemarkup="true"/>
          <nodename maxwidth="487.29296875">
            <text data="**Ordering switch Branches**&#10;The order of `case` and `default` clauses for `switch` statement matters, because more than one branch might be reached during execution. For `switch` expressions that don&#x2019;t use pattern matching, ordering isn&#x2019;t important, as only one branch can be reached."/>
          </nodename>
          <nodenote></nodenote>
          <nodes>
            <node id="14" posx="1585.0078125" posy="544.744140625" width="358" height="70" side="right" fold="false" treesize="328" color="#c6262e" colorroot="false" summarized="false" layout="Horizontal" group="false">
              <style branchmargin="100" branchradius="25" linktype="curved" linkwidth="4" linkarrow="false" linkdash="longdash" nodeborder="underlined" nodewidth="473" nodeborderwidth="4" nodefill="false" nodemargin="8" nodepadding="6" nodefont="Sans 11" nodemarkup="true"/>
              <nodename maxwidth="473">
                <text data="When working with pattern matching, the order&#10;matters regardless of the type of `switch`!"/>
              </nodename>
              <nodenote></nodenote>
              <nodes>
                <node id="15" posx="2043.0078125" posy="490.744140625" width="370" height="178" side="right" fold="false" treesize="328" color="#c6262e" colorroot="false" summarized="false" layout="Horizontal" group="false">
                  <style branchmargin="100" branchradius="25" linktype="curved" linkwidth="4" linkarrow="false" linkdash="longdash" nodeborder="underlined" nodewidth="473" nodeborderwidth="4" nodefill="false" nodemargin="8" nodepadding="6" nodefont="Sans 11" nodemarkup="true"/>
                  <nodename maxwidth="473">
                    <text data="`void printDetails(Number height) {&#10;String message = switch (height) {&#10;  **case Number n**-&gt; &quot;Unknown: &quot; + n;&#10;    case Integer i -&gt; &quot;Rounded: &quot; + i;&#10;    case Double d -&gt; &quot;Precise: &quot; + d;&#10;  };&#10;  System.out.print(message);&#10;}`"/>
                  </nodename>
                  <nodenote></nodenote>
                  <nodes>
                    <node id="16" posx="2513.0078125" posy="499.244140625" width="479" height="91" side="right" fold="false" treesize="258" color="#c6262e" colorroot="false" summarized="false" layout="Horizontal" group="false">
                      <style branchmargin="100" branchradius="25" linktype="curved" linkwidth="4" linkarrow="false" linkdash="longdash" nodeborder="underlined" nodewidth="473" nodeborderwidth="4" nodefill="false" nodemargin="8" nodepadding="6" nodefont="Sans 11" nodemarkup="true"/>
                      <nodename maxwidth="473">
                        <text data="It is impossible for a process to reach the second and third `case`&#10;clauses. This is also referred to as unreachable code (when the compiler detects it, a compilation error occurs)."/>
                      </nodename>
                      <nodenote></nodenote>
                      <nodes>
                        <node id="18" posx="3092.0078125" posy="415.744140625" width="453" height="49" side="right" fold="false" treesize="49" color="#c6262e" colorroot="false" summarized="false" layout="Horizontal" group="false">
                          <style branchmargin="100" branchradius="25" linktype="curved" linkwidth="4" linkarrow="false" linkdash="longdash" nodeborder="underlined" nodewidth="473" nodeborderwidth="4" nodefill="false" nodemargin="8" nodepadding="6" nodefont="Sans 11" nodemarkup="true"/>
                          <nodename maxwidth="473">
                            <text data="Ordering branches is also important if a `when` clause is used."/>
                          </nodename>
                          <nodenote></nodenote>
                        </node>
                        <node id="19" posx="3092.0078125" posy="464.744140625" width="604" height="160" side="right" fold="false" treesize="160" color="#c6262e" colorroot="false" summarized="false" layout="Horizontal" group="false">
                          <style branchmargin="100" branchradius="25" linktype="curved" linkwidth="4" linkarrow="false" linkdash="longdash" nodeborder="underlined" nodewidth="593" nodeborderwidth="4" nodefill="false" nodemargin="8" nodepadding="6" nodefont="Sans 11" nodemarkup="true"/>
                          <nodename maxwidth="595.32031250000011">
                            <text data="`String getTrainer(Number animal) {&#10;  return switch (animal) {&#10;    case Integer i -&gt; &quot;Daniel&quot;;&#10;  **case Integer i when i &gt; 10 -&gt;**&quot;Joseph&quot;; // DOES NOT COMPILE&#10;    &#x2026;&#10;  };&#10;}`"/>
                          </nodename>
                          <nodenote></nodenote>
                        </node>
                        <node id="20" posx="3092.0078125" posy="624.744140625" width="598" height="49" side="right" fold="false" treesize="49" color="#c6262e" colorroot="false" summarized="false" layout="Horizontal" group="false">
                          <style branchmargin="100" branchradius="25" linktype="curved" linkwidth="4" linkarrow="false" linkdash="longdash" nodeborder="underlined" nodewidth="593" nodeborderwidth="4" nodefill="false" nodemargin="8" nodepadding="6" nodefont="Sans 11" nodemarkup="true"/>
                          <nodename maxwidth="593">
                            <text data="It goes from the most specific to the most general, similar to multiple catch blocks."/>
                          </nodename>
                          <nodenote></nodenote>
                        </node>
                      </nodes>
                    </node>
                    <node id="17" posx="2513.0078125" posy="673.744140625" width="485" height="70" side="right" fold="false" treesize="70" color="#c6262e" colorroot="false" summarized="false" layout="Horizontal" group="false">
                      <style branchmargin="100" branchradius="25" linktype="curved" linkwidth="4" linkarrow="false" linkdash="longdash" nodeborder="underlined" nodewidth="473" nodeborderwidth="4" nodefill="false" nodemargin="8" nodepadding="6" nodefont="Sans 11" nodemarkup="true"/>
                      <nodename maxwidth="473">
                        <text data="The last two `case` statements are unreachable. Go from the most specific type to the most general."/>
                      </nodename>
                      <nodenote></nodenote>
                    </node>
                  </nodes>
                </node>
              </nodes>
            </node>
          </nodes>
        </node>
        <node id="21" posx="983.0078125" posy="743.744140625" width="473" height="175" side="right" fold="false" treesize="175" color="#f37329" colorroot="false" summarized="false" layout="Horizontal" group="false">
          <style branchmargin="100" branchradius="25" linktype="curved" linkwidth="4" linkarrow="false" linkdash="longdash" nodeborder="underlined" nodewidth="473" nodeborderwidth="4" nodefill="false" nodemargin="8" nodepadding="6" nodefont="Sans 11" nodemarkup="true"/>
          <nodename maxwidth="472.7109375">
            <text data="**Exhaustive `switch` Statements**&#10;Up until now, only `switch` expressions were required to be&#10;exhaustive. When using pattern matching, `switch` statements must be exhaustive too. As before, you can address this with a `default` clause, as this will handle all values that don&#x2019;t match a `case` clause. There is another option, though, that applies only when working with pattern matching."/>
          </nodename>
          <nodenote></nodenote>
          <nodes>
            <node id="22" posx="1556.0078125" posy="775.244140625" width="518" height="112" side="right" fold="false" treesize="112" color="#f37329" colorroot="false" summarized="false" layout="Horizontal" group="false">
              <style branchmargin="100" branchradius="25" linktype="curved" linkwidth="4" linkarrow="false" linkdash="longdash" nodeborder="underlined" nodewidth="484" nodeborderwidth="4" nodefill="false" nodemargin="8" nodepadding="6" nodefont="Sans 11" nodemarkup="true"/>
              <nodename maxwidth="495.13802083333326">
                <text data="You may have noticed that **we didn&#x2019;t use any `default` clauses in any of our previous pattern matching examples. That&#x2019;s because we defined our last `case` clause with a pattern matching variable type that is the same as the switch variable reference type.**"/>
              </nodename>
              <nodenote></nodenote>
              <nodes>
                <node id="23" posx="2174.0078125" posy="785.744140625" width="529" height="91" side="right" fold="false" treesize="106" color="#f37329" colorroot="false" summarized="false" layout="Horizontal" group="false">
                  <style branchmargin="100" branchradius="25" linktype="curved" linkwidth="4" linkarrow="false" linkdash="longdash" nodeborder="underlined" nodewidth="501" nodeborderwidth="4" nodefill="false" nodemargin="8" nodepadding="6" nodefont="Sans 11" nodemarkup="true"/>
                  <nodename maxwidth="504.9765625">
                    <text data="For example,**if the variable reference type of the switch expression is type `Integer` or `String`, then you just need to make sure the last `case` clause is of type `Integer` or `String`**, respectively."/>
                  </nodename>
                  <nodenote></nodenote>
                  <nodes>
                    <node id="24" posx="2803.0078125" posy="778.244140625" width="469" height="106" side="right" fold="false" treesize="106" color="#f37329" colorroot="false" summarized="false" layout="Horizontal" group="false">
                      <style branchmargin="100" branchradius="25" linktype="curved" linkwidth="4" linkarrow="false" linkdash="longdash" nodeborder="underlined" nodewidth="567" nodeborderwidth="4" nodefill="false" nodemargin="8" nodepadding="6" nodefont="Sans 11" nodemarkup="true"/>
                      <nodename maxwidth="571.85677083333314">
                        <text data="`**Number**zooPatrons = Integer.valueOf(1_000);&#10;switch (zooPatrons) {&#10;**case Integer count**-&gt; System.out.print(count);&#10;}`"/>
                      </nodename>
                      <nodenote></nodenote>
                      <nodes>
                        <node id="25" posx="3372.0078125" posy="785.744140625" width="353" height="91" side="right" fold="false" treesize="91" color="#f37329" colorroot="false" summarized="false" layout="Horizontal" group="false">
                          <style branchmargin="100" branchradius="25" linktype="curved" linkwidth="4" linkarrow="false" linkdash="longdash" nodeborder="underlined" nodewidth="397" nodeborderwidth="4" nodefill="false" nodemargin="8" nodepadding="6" nodefont="Sans 11" nodemarkup="true"/>
                          <nodename maxwidth="345.451171875">
                            <text data="It doesn&#x2019;t compile! Despite the `zooPatrons` object actually being of type `Integer`, the `switch` reference variable is of type `Number`."/>
                          </nodename>
                          <nodenote></nodenote>
                        </node>
                      </nodes>
                    </node>
                  </nodes>
                </node>
              </nodes>
            </node>
          </nodes>
        </node>
        <node id="26" posx="983.0078125" posy="1000.244140625" width="468" height="70" side="right" fold="false" treesize="233" color="#f9c440" colorroot="false" summarized="false" layout="Horizontal" group="false">
          <style branchmargin="100" branchradius="25" linktype="curved" linkwidth="4" linkarrow="false" linkdash="longdash" nodeborder="underlined" nodewidth="473" nodeborderwidth="4" nodefill="false" nodemargin="8" nodepadding="6" nodefont="Sans 11" nodemarkup="true"/>
          <nodename maxwidth="473">
            <text data=" There are a few ways that we can fix the last example. First, we&#10;can change the reference type of `zooPatrons` to be `Integer`"/>
          </nodename>
          <nodenote></nodenote>
          <nodes>
            <node id="27" posx="1551.0078125" posy="982.244140625" width="469" height="106" side="right" fold="false" treesize="233" color="#f9c440" colorroot="false" summarized="false" layout="Horizontal" group="false">
              <style branchmargin="100" branchradius="25" linktype="curved" linkwidth="4" linkarrow="false" linkdash="longdash" nodeborder="underlined" nodewidth="473" nodeborderwidth="4" nodefill="false" nodemargin="8" nodepadding="6" nodefont="Sans 11" nodemarkup="true"/>
              <nodename maxwidth="473">
                <text data="`**Integer**zooPatrons = Integer.valueOf(1_000);&#10;switch (zooPatrons) {&#10;**case Integer count**-&gt; System.out.print(count);&#10;}`"/>
              </nodename>
              <nodenote></nodenote>
              <nodes>
                <node id="28" posx="2120.0078125" posy="1000.244140625" width="238" height="70" side="right" fold="false" treesize="233" color="#f9c440" colorroot="false" summarized="false" layout="Horizontal" group="false">
                  <style branchmargin="100" branchradius="25" linktype="curved" linkwidth="4" linkarrow="false" linkdash="longdash" nodeborder="underlined" nodewidth="267" nodeborderwidth="4" nodefill="false" nodemargin="8" nodepadding="6" nodefont="Sans 11" nodemarkup="true"/>
                  <nodename maxwidth="211.404296875">
                    <text data="We can also add a `case` clause at the end for `Number`."/>
                  </nodename>
                  <nodenote></nodenote>
                  <nodes>
                    <node id="29" posx="2458.0078125" posy="973.244140625" width="487" height="124" side="right" fold="false" treesize="233" color="#f9c440" colorroot="false" summarized="false" layout="Horizontal" group="false">
                      <style branchmargin="100" branchradius="25" linktype="curved" linkwidth="4" linkarrow="false" linkdash="longdash" nodeborder="underlined" nodewidth="561" nodeborderwidth="4" nodefill="false" nodemargin="8" nodepadding="6" nodefont="Sans 11" nodemarkup="true"/>
                      <nodename maxwidth="566.525390625">
                        <text data="`**Number**zooPatrons = Integer.valueOf(1_000);&#10;switch (zooPatrons) {&#10;  case Integer count -&gt; System.out.print(count);&#10;**case Number count**-&gt; System.out.print(&quot;Number&quot;);&#10;}`"/>
                      </nodename>
                      <nodenote></nodenote>
                      <nodes>
                        <node id="30" posx="3045.0078125" posy="979.244140625" width="246" height="112" side="right" fold="false" treesize="233" color="#f9c440" colorroot="false" summarized="false" layout="Horizontal" group="false">
                          <style branchmargin="100" branchradius="25" linktype="curved" linkwidth="4" linkarrow="false" linkdash="longdash" nodeborder="underlined" nodewidth="239" nodeborderwidth="4" nodefill="false" nodemargin="8" nodepadding="6" nodefont="Sans 11" nodemarkup="true"/>
                          <nodename maxwidth="219.126953125">
                            <text data="We can always add a `default` clause to a `switch` that covers everything.  What if you combine different solutions?"/>
                          </nodename>
                          <nodenote></nodenote>
                          <nodes>
                            <node id="31" posx="3391.0078125" posy="918.744140625" width="487" height="142" side="right" fold="false" treesize="142" color="#f9c440" colorroot="false" summarized="false" layout="Horizontal" group="false">
                              <style branchmargin="100" branchradius="25" linktype="curved" linkwidth="4" linkarrow="false" linkdash="longdash" nodeborder="underlined" nodewidth="481" nodeborderwidth="4" nodefill="false" nodemargin="8" nodepadding="6" nodefont="Sans 11" nodemarkup="true"/>
                              <nodename maxwidth="486.833984375">
                                <text data="`Number zooPatrons = Integer.valueOf(1_000);&#10;switch (zooPatrons) {&#10;  case Integer count -&gt; System.out.print(count);&#10;**case Number count -&gt;**System.out.print(&quot;Number&quot;);&#10;**default -&gt;**System.out.print(&quot;Default&quot;);&#10;}`"/>
                              </nodename>
                              <nodenote></nodenote>
                            </node>
                            <node id="32" posx="3391.0078125" posy="1060.744140625" width="374" height="91" side="right" fold="false" treesize="91" color="#f9c440" colorroot="false" summarized="false" layout="Horizontal" group="false">
                              <style branchmargin="100" branchradius="25" linktype="curved" linkwidth="4" linkarrow="false" linkdash="longdash" nodeborder="underlined" nodewidth="408" nodeborderwidth="4" nodefill="false" nodemargin="8" nodepadding="6" nodefont="Sans 11" nodemarkup="true"/>
                              <nodename maxwidth="359.056640625">
                                <text data="The code does not compile, regardless of how you order the branches. The compiler is smart enough to realize the last two statements are redundant"/>
                              </nodename>
                              <nodenote></nodenote>
                            </node>
                          </nodes>
                        </node>
                      </nodes>
                    </node>
                  </nodes>
                </node>
              </nodes>
            </node>
          </nodes>
        </node>
      </nodes>
    </node>
  </nodes>
  <groups/>
  <stickers/>
  <nodelinks id="0"/>
</minder>

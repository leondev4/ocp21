<?xml version="1.0"?>
<minder version="1.16.2" parent-etag="167552103" etag="449130488">
  <theme name="default" label="Light" index="-1"/>
  <styles>
    <style level="0" isset="true" branchmargin="100" branchradius="25" linktype="curved" linkwidth="4" linkarrow="false" linkdash="longdash" nodeborder="rounded" nodewidth="200" nodeborderwidth="4" nodefill="false" nodemargin="10" nodepadding="10" nodefont="Sans 11" nodemarkup="true" connectiondash="dotted" connectionlwidth="2" connectionarrow="fromto" connectionpadding="3" connectionfont="Sans 10" connectiontwidth="100" calloutfont="Sans 12" calloutpadding="5" calloutptrwidth="20" calloutptrlength="20"/>
    <style level="1" isset="true" branchmargin="100" branchradius="25" linktype="curved" linkwidth="4" linkarrow="false" linkdash="longdash" nodeborder="underlined" nodewidth="200" nodeborderwidth="4" nodefill="false" nodemargin="8" nodepadding="6" nodefont="Sans 11" nodemarkup="true" connectiondash="dotted" connectionlwidth="2" connectionarrow="fromto" connectionpadding="3" connectionfont="Sans 10" connectiontwidth="100" calloutfont="Sans 12" calloutpadding="5" calloutptrwidth="20" calloutptrlength="20"/>
    <style level="2" isset="true" branchmargin="100" branchradius="25" linktype="curved" linkwidth="4" linkarrow="false" linkdash="longdash" nodeborder="underlined" nodewidth="200" nodeborderwidth="4" nodefill="false" nodemargin="8" nodepadding="6" nodefont="Sans 11" nodemarkup="true" connectiondash="dotted" connectionlwidth="2" connectionarrow="fromto" connectionpadding="3" connectionfont="Sans 10" connectiontwidth="100" calloutfont="Sans 12" calloutpadding="5" calloutptrwidth="20" calloutptrlength="20"/>
    <style level="3" isset="true" branchmargin="100" branchradius="25" linktype="curved" linkwidth="4" linkarrow="false" linkdash="longdash" nodeborder="underlined" nodewidth="200" nodeborderwidth="4" nodefill="false" nodemargin="8" nodepadding="6" nodefont="Sans 11" nodemarkup="true" connectiondash="dotted" connectionlwidth="2" connectionarrow="fromto" connectionpadding="3" connectionfont="Sans 10" connectiontwidth="100" calloutfont="Sans 12" calloutpadding="5" calloutptrwidth="20" calloutptrlength="20"/>
    <style level="4" isset="true" branchmargin="100" branchradius="25" linktype="curved" linkwidth="4" linkarrow="false" linkdash="longdash" nodeborder="underlined" nodewidth="200" nodeborderwidth="4" nodefill="false" nodemargin="8" nodepadding="6" nodefont="Sans 11" nodemarkup="true" connectiondash="dotted" connectionlwidth="2" connectionarrow="fromto" connectionpadding="3" connectionfont="Sans 10" connectiontwidth="100" calloutfont="Sans 12" calloutpadding="5" calloutptrwidth="20" calloutptrlength="20"/>
    <style level="5" isset="true" branchmargin="100" branchradius="25" linktype="curved" linkwidth="4" linkarrow="false" linkdash="longdash" nodeborder="underlined" nodewidth="200" nodeborderwidth="4" nodefill="false" nodemargin="8" nodepadding="6" nodefont="Sans 11" nodemarkup="true" connectiondash="dotted" connectionlwidth="2" connectionarrow="fromto" connectionpadding="3" connectionfont="Sans 10" connectiontwidth="100" calloutfont="Sans 12" calloutpadding="5" calloutptrwidth="20" calloutptrlength="20"/>
    <style level="6" isset="true" branchmargin="100" branchradius="25" linktype="curved" linkwidth="4" linkarrow="false" linkdash="longdash" nodeborder="underlined" nodewidth="200" nodeborderwidth="4" nodefill="false" nodemargin="8" nodepadding="6" nodefont="Sans 11" nodemarkup="true" connectiondash="dotted" connectionlwidth="2" connectionarrow="fromto" connectionpadding="3" connectionfont="Sans 10" connectiontwidth="100" calloutfont="Sans 12" calloutpadding="5" calloutptrwidth="20" calloutptrlength="20"/>
    <style level="7" isset="true" branchmargin="100" branchradius="25" linktype="curved" linkwidth="4" linkarrow="false" linkdash="longdash" nodeborder="underlined" nodewidth="200" nodeborderwidth="4" nodefill="false" nodemargin="8" nodepadding="6" nodefont="Sans 11" nodemarkup="true" connectiondash="dotted" connectionlwidth="2" connectionarrow="fromto" connectionpadding="3" connectionfont="Sans 10" connectiontwidth="100" calloutfont="Sans 12" calloutpadding="5" calloutptrwidth="20" calloutptrlength="20"/>
    <style level="8" isset="true" branchmargin="100" branchradius="25" linktype="curved" linkwidth="4" linkarrow="false" linkdash="longdash" nodeborder="underlined" nodewidth="200" nodeborderwidth="4" nodefill="false" nodemargin="8" nodepadding="6" nodefont="Sans 11" nodemarkup="true" connectiondash="dotted" connectionlwidth="2" connectionarrow="fromto" connectionpadding="3" connectionfont="Sans 10" connectiontwidth="100" calloutfont="Sans 12" calloutpadding="5" calloutptrwidth="20" calloutptrlength="20"/>
    <style level="9" isset="true" branchmargin="100" branchradius="25" linktype="curved" linkwidth="4" linkarrow="false" linkdash="longdash" nodeborder="underlined" nodewidth="200" nodeborderwidth="4" nodefill="false" nodemargin="8" nodepadding="6" nodefont="Sans 11" nodemarkup="true" connectiondash="dotted" connectionlwidth="2" connectionarrow="fromto" connectionpadding="3" connectionfont="Sans 10" connectiontwidth="100" calloutfont="Sans 12" calloutpadding="5" calloutptrwidth="20" calloutptrlength="20"/>
    <style level="10" isset="true" branchmargin="100" branchradius="25" linktype="curved" linkwidth="4" linkarrow="false" linkdash="longdash" nodeborder="underlined" nodewidth="200" nodeborderwidth="4" nodefill="false" nodemargin="8" nodepadding="6" nodefont="Sans 11" nodemarkup="true" connectiondash="dotted" connectionlwidth="2" connectionarrow="fromto" connectionpadding="3" connectionfont="Sans 10" connectiontwidth="100" calloutfont="Sans 12" calloutpadding="5" calloutptrwidth="20" calloutptrlength="20"/>
  </styles>
  <images/>
  <nodes>
    <node id="0" posx="195.75390625" posy="392.3359375" width="249" height="49" side="left" fold="false" treesize="2119" summarized="false" layout="Horizontal" group="false">
      <style branchmargin="100" branchradius="25" linktype="curved" linkwidth="4" linkarrow="false" linkdash="longdash" nodeborder="underlined" nodewidth="246" nodeborderwidth="4" nodefill="false" nodemargin="8" nodepadding="6" nodefont="Sans 11" nodemarkup="true"/>
      <nodename maxwidth="249.05859375">
        <text data="**Using Method References**"/>
      </nodename>
      <nodenote></nodenote>
      <nodes>
        <node id="1" posx="544.75390625" posy="-583.16406250000011" width="444" height="70" side="right" fold="false" treesize="189" color="#c6262e" colorroot="false" summarized="false" layout="Horizontal" group="false">
          <style branchmargin="100" branchradius="25" linktype="curved" linkwidth="4" linkarrow="false" linkdash="longdash" nodeborder="underlined" nodewidth="410" nodeborderwidth="4" nodefill="false" nodemargin="8" nodepadding="6" nodefont="Sans 11" nodemarkup="true"/>
          <nodename maxwidth="418.77864583333337">
            <text data="Method references are another way to make the code easier to read, such as simply mentioning the name of the method."/>
          </nodename>
          <nodenote></nodenote>
          <nodes>
            <node id="2" posx="1088.75390625" posy="-602.66406250000011" width="325" height="109" side="right" fold="false" treesize="189" color="#c6262e" colorroot="false" summarized="false" layout="Horizontal" group="false">
              <style branchmargin="100" branchradius="25" linktype="curved" linkwidth="4" linkarrow="false" linkdash="longdash" nodeborder="underlined" nodewidth="410" nodeborderwidth="4" nodefill="false" nodemargin="8" nodepadding="6" nodefont="Sans 11" nodemarkup="true"/>
              <nodename maxwidth="410">
                <text data="Consider the following functional interface:&#10;`public interface LearnToSpeak {&#10; **void speak(String sound);**&#10;}`"/>
              </nodename>
              <nodenote></nodenote>
              <nodes>
                <node id="3" posx="1513.75390625" posy="-642.66406250000011" width="502" height="70" side="right" fold="false" treesize="70" color="#c6262e" colorroot="false" summarized="false" layout="Horizontal" group="false">
                  <style branchmargin="100" branchradius="25" linktype="curved" linkwidth="4" linkarrow="false" linkdash="longdash" nodeborder="underlined" nodewidth="496" nodeborderwidth="4" nodefill="false" nodemargin="8" nodepadding="6" nodefont="Sans 11" nodemarkup="true"/>
                  <nodename maxwidth="498.23697916666669">
                    <text data="Using lambdas&#10;**`LearnToSpeak learner=s -&#xAD;&gt; System.out.println(s);`**"/>
                  </nodename>
                  <nodenote></nodenote>
                </node>
                <node id="4" posx="1513.75390625" posy="-572.66406250000011" width="439" height="70" side="right" fold="false" treesize="70" color="#c6262e" colorroot="false" summarized="false" layout="Horizontal" group="false">
                  <style branchmargin="100" branchradius="25" linktype="curved" linkwidth="4" linkarrow="false" linkdash="longdash" nodeborder="underlined" nodewidth="410" nodeborderwidth="4" nodefill="false" nodemargin="8" nodepadding="6" nodefont="Sans 11" nodemarkup="true"/>
                  <nodename maxwidth="411.15364583333326">
                    <text data="Usig method reference&#10;**`LearnToSpeak learner=System.out::println;`**"/>
                  </nodename>
                  <nodenote></nodenote>
                </node>
                <node id="5" posx="1513.75390625" posy="-502.66406250000011" width="503" height="49" side="right" fold="false" treesize="49" color="#c6262e" colorroot="false" summarized="false" layout="Horizontal" group="false">
                  <style branchmargin="100" branchradius="25" linktype="curved" linkwidth="4" linkarrow="false" linkdash="longdash" nodeborder="underlined" nodewidth="513" nodeborderwidth="4" nodefill="false" nodemargin="8" nodepadding="6" nodefont="Sans 11" nodemarkup="true"/>
                  <nodename maxwidth="517.36979166666663">
                    <text data="The **`::`** operator tells Java to call the `println()` method later."/>
                  </nodename>
                  <nodenote></nodenote>
                </node>
              </nodes>
            </node>
          </nodes>
        </node>
        <node id="6" posx="544.75390625" posy="-325.66406250000011" width="245" height="49" side="right" fold="false" treesize="305" color="#f37329" colorroot="false" summarized="false" layout="Horizontal" group="false">
          <style branchmargin="100" branchradius="25" linktype="curved" linkwidth="4" linkarrow="false" linkdash="longdash" nodeborder="underlined" nodewidth="410" nodeborderwidth="4" nodefill="false" nodemargin="8" nodepadding="6" nodefont="Sans 11" nodemarkup="true"/>
          <nodename maxwidth="410">
            <text data="**Calling `static` Methods**"/>
          </nodename>
          <nodenote></nodenote>
          <nodes>
            <node id="7" posx="889.75390625" posy="-453.66406250000011" width="479" height="109" side="right" fold="false" treesize="109" color="#f37329" colorroot="false" summarized="false" layout="Horizontal" group="false">
              <style branchmargin="100" branchradius="25" linktype="curved" linkwidth="4" linkarrow="false" linkdash="longdash" nodeborder="underlined" nodewidth="449" nodeborderwidth="4" nodefill="false" nodemargin="8" nodepadding="6" nodefont="Sans 11" nodemarkup="true"/>
              <nodename maxwidth="451.10677083333326">
                <text data="We use a functional interface that converts a `double` to a `long`:&#10;`interface Converter {&#10; **long round(double num);**&#10;}`"/>
              </nodename>
              <nodenote></nodenote>
            </node>
            <node id="8" posx="889.75390625" posy="-299.66406250000011" width="518" height="106" side="right" fold="false" treesize="196" color="#f37329" colorroot="false" summarized="false" layout="Horizontal" group="false">
              <style branchmargin="100" branchradius="25" linktype="curved" linkwidth="4" linkarrow="false" linkdash="longdash" nodeborder="underlined" nodewidth="497" nodeborderwidth="4" nodefill="false" nodemargin="8" nodepadding="6" nodefont="Sans 11" nodemarkup="true"/>
              <nodename maxwidth="498.53125">
                <text data="`14: Converter methodRef =**Math::round;**&#10;15: Converter lambda = x-&gt;Math.round(x);&#10;16:&#10;17: System.out.println(methodRef.round(100.1)); // 100`"/>
              </nodename>
              <nodenote></nodenote>
              <nodes>
                <node id="9" posx="1507.75390625" posy="-344.66406250000011" width="757" height="196" side="right" fold="false" treesize="196" color="#f37329" colorroot="false" summarized="false" layout="Horizontal" group="false">
                  <style branchmargin="100" branchradius="25" linktype="curved" linkwidth="4" linkarrow="false" linkdash="longdash" nodeborder="underlined" nodewidth="727" nodeborderwidth="4" nodefill="false" nodemargin="8" nodepadding="6" nodefont="Sans 11" nodemarkup="true"/>
                  <nodename maxwidth="732.62239583333337">
                    <text data="On line 14, we reference a method with one parameter, and Java knows that it&#x2019;s like a lambda with one parameter. Additionally, Java knows to pass that parameter to the method.&#10;Wait a minute. You might be aware that the `round()` method is overloaded&#x2014;&#xAD;it can take a `double` or a `float` and returns `long` or `int`. How does Java know that we want to call the version with a `double`? With both lambdas and method references, Java infers information from the _context_. In this case, we said that we were declaring a `Converter`, which has a method taking a `double` parameter. **Java looks for a method that matches that description. If it can&#x2019;t find it or finds multiple matches, then the compiler will report an error. The latter is sometimes called an _ambiguous_ type error.**"/>
                  </nodename>
                  <nodenote></nodenote>
                </node>
              </nodes>
            </node>
          </nodes>
        </node>
        <node id="10" posx="544.75390625" posy="191.33593750000011" width="230" height="70" side="right" fold="false" treesize="750" color="#f9c440" colorroot="false" summarized="false" layout="Horizontal" group="false">
          <style branchmargin="100" branchradius="25" linktype="curved" linkwidth="4" linkarrow="false" linkdash="longdash" nodeborder="underlined" nodewidth="234" nodeborderwidth="4" nodefill="false" nodemargin="8" nodepadding="6" nodefont="Sans 11" nodemarkup="true"/>
          <nodename maxwidth="211.47916666666663">
            <text data="**Calling Instance Methods on a Particular Object**"/>
          </nodename>
          <nodenote></nodenote>
          <nodes>
            <node id="11" posx="874.75390625" posy="-148.66406249999989" width="415" height="130" side="right" fold="false" treesize="130" color="#f9c440" colorroot="false" summarized="false" layout="Horizontal" group="false">
              <style branchmargin="100" branchradius="25" linktype="curved" linkwidth="4" linkarrow="false" linkdash="longdash" nodeborder="underlined" nodewidth="419" nodeborderwidth="4" nodefill="false" nodemargin="8" nodepadding="6" nodefont="Sans 11" nodemarkup="true"/>
              <nodename maxwidth="412.46614583333337">
                <text data="We have a functional interface that checks if a `String` starts with a specified value:&#10;`interface StringStart {&#10; **boolean beginningCheck(String prefix);**&#10;}`"/>
              </nodename>
              <nodenote></nodenote>
            </node>
            <node id="12" posx="874.75390625" posy="-18.664062499999886" width="599" height="124" side="right" fold="false" treesize="124" color="#f9c440" colorroot="false" summarized="false" layout="Horizontal" group="false">
              <style branchmargin="100" branchradius="25" linktype="curved" linkwidth="4" linkarrow="false" linkdash="longdash" nodeborder="underlined" nodewidth="584" nodeborderwidth="4" nodefill="false" nodemargin="8" nodepadding="6" nodefont="Sans 11" nodemarkup="true"/>
              <nodename maxwidth="588.046875">
                <text data="`18: var str = &quot;Zoo&quot;; //effectively final or final&#10;19: StringStart methodRef =**str::startsWith;**&#10;20: StringStart lambda = s -&gt; str.startsWith(s);&#10;21:&#10;22: System.out.println(methodRef.beginningCheck(&quot;A&quot;)); // false`"/>
              </nodename>
              <nodenote></nodenote>
              <nodes>
                <node id="13" posx="1573.75390625" posy="8.3359375000001137" width="419" height="70" side="right" fold="false" treesize="70" color="#f9c440" colorroot="false" summarized="false" layout="Horizontal" group="false">
                  <style branchmargin="100" branchradius="25" linktype="curved" linkwidth="4" linkarrow="false" linkdash="longdash" nodeborder="underlined" nodewidth="434" nodeborderwidth="4" nodefill="false" nodemargin="8" nodepadding="6" nodefont="Sans 11" nodemarkup="true"/>
                  <nodename maxwidth="417.09895833333348">
                    <text data="Line 19 shows that we want to call `str.startsWith()` and pass a single parameter to be supplied at runtime"/>
                  </nodename>
                  <nodenote></nodenote>
                </node>
              </nodes>
            </node>
            <node id="14" posx="874.75390625" posy="105.33593750000011" width="607" height="130" side="right" fold="false" treesize="130" color="#f9c440" colorroot="false" summarized="false" layout="Horizontal" group="false">
              <style branchmargin="100" branchradius="25" linktype="curved" linkwidth="4" linkarrow="false" linkdash="longdash" nodeborder="underlined" nodewidth="584" nodeborderwidth="4" nodefill="false" nodemargin="8" nodepadding="6" nodefont="Sans 11" nodemarkup="true"/>
              <nodename maxwidth="584">
                <text data="In this example, we create a functional interface with a method that doesn&#x2019;t take any parameters but returns a value:&#10;`interface StringChecker {&#10; **boolean check();**&#10;}`"/>
              </nodename>
              <nodenote></nodenote>
            </node>
            <node id="15" posx="874.75390625" posy="235.33593750000011" width="464" height="145" side="right" fold="false" treesize="145" color="#f9c440" colorroot="false" summarized="false" layout="Horizontal" group="false">
              <style branchmargin="100" branchradius="25" linktype="curved" linkwidth="4" linkarrow="false" linkdash="longdash" nodeborder="underlined" nodewidth="584" nodeborderwidth="4" nodefill="false" nodemargin="8" nodepadding="6" nodefont="Sans 11" nodemarkup="true"/>
              <nodename maxwidth="584">
                <text data="We implement it by checking if the String is empty:&#10;`18: var str = &quot;&quot;;&#10;19: StringChecker methodRef =**str::isEmpty;**&#10;20: StringChecker lambda = () -&gt; str.isEmpty();&#10;21:&#10;22: System.out.print(methodRef.check()); // true`"/>
              </nodename>
              <nodenote></nodenote>
              <nodes>
                <node id="16" posx="1438.75390625" posy="272.83593750000011" width="446" height="70" side="right" fold="false" treesize="70" color="#f9c440" colorroot="false" summarized="false" layout="Horizontal" group="false">
                  <style branchmargin="100" branchradius="25" linktype="curved" linkwidth="4" linkarrow="false" linkdash="longdash" nodeborder="underlined" nodewidth="456" nodeborderwidth="4" nodefill="false" nodemargin="8" nodepadding="6" nodefont="Sans 11" nodemarkup="true"/>
                  <nodename maxwidth="443.5234375">
                    <text data="Since the method on `String` is an instance method, we call the method reference on an instance of the `String` class."/>
                  </nodename>
                  <nodenote></nodenote>
                </node>
              </nodes>
            </node>
            <node id="17" posx="874.75390625" posy="424.33593750000011" width="652" height="133" side="right" fold="false" treesize="221" color="#f9c440" colorroot="false" summarized="false" layout="Horizontal" group="false">
              <style branchmargin="100" branchradius="25" linktype="curved" linkwidth="4" linkarrow="false" linkdash="longdash" nodeborder="underlined" nodewidth="624" nodeborderwidth="4" nodefill="false" nodemargin="8" nodepadding="6" nodefont="Sans 11" nodemarkup="true"/>
              <nodename maxwidth="625.25">
                <text data="While all method references can be turned into lambdas, the opposite is not always `true`.&#10;For example, consider this code:&#10;&#10;`var str = &quot;&quot;;&#10;StringChecker lambda = () -&gt; str.startsWith(&quot;Zoo&quot;);`"/>
              </nodename>
              <nodenote></nodenote>
              <nodes>
                <node id="18" posx="1626.75390625" posy="380.33593750000011" width="707" height="130" side="right" fold="false" treesize="130" color="#f9c440" colorroot="false" summarized="false" layout="Horizontal" group="false">
                  <style branchmargin="100" branchradius="25" linktype="curved" linkwidth="4" linkarrow="false" linkdash="longdash" nodeborder="underlined" nodewidth="671" nodeborderwidth="4" nodefill="false" nodemargin="8" nodepadding="6" nodefont="Sans 11" nodemarkup="true"/>
                  <nodename maxwidth="680.64843749999989">
                    <text data="How might we write this as a method reference? You might try one of the following:&#10;&#10;`StringChecker methodReference = str::startsWith; // DOES NOT COMPILE&#10;&#10;StringChecker methodReference = str::startsWith(&quot;Zoo&quot;); // DOES NOT COMPILE`"/>
                  </nodename>
                  <nodenote></nodenote>
                </node>
                <node id="19" posx="1626.75390625" posy="510.33593750000011" width="536" height="91" side="right" fold="false" treesize="91" color="#f9c440" colorroot="false" summarized="false" layout="Horizontal" group="false">
                  <style branchmargin="100" branchradius="25" linktype="curved" linkwidth="4" linkarrow="false" linkdash="longdash" nodeborder="underlined" nodewidth="525" nodeborderwidth="4" nodefill="false" nodemargin="8" nodepadding="6" nodefont="Sans 11" nodemarkup="true"/>
                  <nodename maxwidth="508.36979166666663">
                    <text data="Neither of these works! While we can pass the `str` as part of the method reference, there&#x2019;s no way to pass the `&quot;Zoo&quot;` parameter with it. Therefore, it is not possible to write this lambda as a method reference."/>
                  </nodename>
                  <nodenote></nodenote>
                </node>
              </nodes>
            </node>
          </nodes>
        </node>
        <node id="21" posx="544.75390625" posy="753.33593750000011" width="253" height="70" side="right" fold="false" treesize="374" color="#68b723" colorroot="false" summarized="false" layout="Horizontal" group="false">
          <style branchmargin="100" branchradius="25" linktype="curved" linkwidth="4" linkarrow="false" linkdash="longdash" nodeborder="underlined" nodewidth="234" nodeborderwidth="4" nodefill="false" nodemargin="8" nodepadding="6" nodefont="Sans 11" nodemarkup="true"/>
          <nodename maxwidth="234">
            <text data="**Calling Instance Methods on a Parameter**"/>
          </nodename>
          <nodenote></nodenote>
          <nodes>
            <node id="22" posx="897.75390625" posy="601.33593750000011" width="554" height="187" side="right" fold="false" treesize="187" color="#68b723" colorroot="false" summarized="false" layout="Horizontal" group="false">
              <style branchmargin="100" branchradius="25" linktype="curved" linkwidth="4" linkarrow="false" linkdash="longdash" nodeborder="underlined" nodewidth="525" nodeborderwidth="4" nodefill="false" nodemargin="8" nodepadding="6" nodefont="Sans 11" nodemarkup="true"/>
              <nodename maxwidth="535.69465116279071">
                <text data="`interface StringParameterChecker {&#10; **boolean check(String text);**&#10;}`&#10;   We can implement this functional interface as follows:&#10;`23: StringParameterChecker methodRef =**String::isEmpty;**&#10;24: StringParameterChecker lambda = s-&gt;s.isEmpty();&#10;25:&#10;26: System.out.println(methodRef.check(&quot;Zoo&quot;)); // false`"/>
              </nodename>
              <nodenote></nodenote>
              <nodes>
                <node id="23" posx="1551.75390625" posy="628.33593750000011" width="768" height="133" side="right" fold="false" treesize="133" color="#68b723" colorroot="false" summarized="false" layout="Horizontal" group="false">
                  <style branchmargin="100" branchradius="25" linktype="curved" linkwidth="4" linkarrow="false" linkdash="longdash" nodeborder="underlined" nodewidth="734" nodeborderwidth="4" nodefill="false" nodemargin="8" nodepadding="6" nodefont="Sans 11" nodemarkup="true"/>
                  <nodename maxwidth="743.64481346899231">
                    <text data="Line 23 says the method that we want to call is declared in `String`. It looks like a `static` method, but it isn&#x2019;t. Instead, Java knows that `isEmpty()` is an instance method that does not take any parameters. Java uses the parameter supplied at runtime as the instance on which the method is called.&#10;Compare lines 23 and 24 with lines 19 and 20 of our instance example. They look similar, although one references a local variable named `str`, while the other only references the functional interface parameters."/>
                  </nodename>
                  <nodenote></nodenote>
                </node>
              </nodes>
            </node>
            <node id="24" posx="897.75390625" posy="788.33593750000011" width="608" height="187" side="right" fold="false" treesize="187" color="#68b723" colorroot="false" summarized="false" layout="Horizontal" group="false">
              <style branchmargin="100" branchradius="25" linktype="curved" linkwidth="4" linkarrow="false" linkdash="longdash" nodeborder="underlined" nodewidth="583" nodeborderwidth="4" nodefill="false" nodemargin="8" nodepadding="6" nodefont="Sans 11" nodemarkup="true"/>
              <nodename maxwidth="588.33072916666652">
                <text data="`interface StringTwoParameterChecker {&#10; **boolean check(String text, String prefix);**&#10;}`&#10;    Pay attention to the parameter order when reading the implementation:&#10;`26: StringTwoParameterChecker methodRef =**String::startsWith;**&#10;27: StringTwoParameterChecker lambda = (s, p)-&gt; s.startsWith(p);&#10;28:&#10;29: System.out.println(methodRef.check(&quot;Zoo&quot;, &quot;A&quot;)); // false`"/>
              </nodename>
              <nodenote></nodenote>
              <nodes>
                <node id="25" posx="1605.75390625" posy="804.83593750000011" width="654" height="154" side="right" fold="false" treesize="154" color="#68b723" colorroot="false" summarized="false" layout="Horizontal" group="false">
                  <style branchmargin="100" branchradius="25" linktype="curved" linkwidth="4" linkarrow="false" linkdash="longdash" nodeborder="underlined" nodewidth="631" nodeborderwidth="4" nodefill="false" nodemargin="8" nodepadding="6" nodefont="Sans 11" nodemarkup="true"/>
                  <nodename maxwidth="634.203125">
                    <text data="Since the functional interface takes two parameters, Java has to figure out what they&#10;represent. The first one will always be the instance of the object for instance methods. Any&#10;others are to be method parameters.&#10;Remember that line 26 may look like a `static` method, but it is really a method reference declaring that the instance of the object will be specified later. Line 27 shows some of the power of a method reference. We were able to replace two lambda parameters this time."/>
                  </nodename>
                  <nodenote></nodenote>
                </node>
              </nodes>
            </node>
          </nodes>
        </node>
        <node id="26" posx="544.75390625" posy="1201.3359374999998" width="208" height="49" side="right" fold="false" treesize="500.99999999999977" color="#3689e6" colorroot="false" summarized="false" layout="Horizontal" group="false">
          <style branchmargin="100" branchradius="25" linktype="curved" linkwidth="4" linkarrow="false" linkdash="longdash" nodeborder="underlined" nodewidth="234" nodeborderwidth="4" nodefill="false" nodemargin="8" nodepadding="6" nodefont="Sans 11" nodemarkup="true"/>
          <nodename maxwidth="234">
            <text data="**Calling Constructors**"/>
          </nodename>
          <nodenote></nodenote>
          <nodes>
            <node id="27" posx="852.75390625" posy="975.3359375" width="634" height="70" side="right" fold="false" treesize="70" color="#3689e6" colorroot="false" summarized="false" layout="Horizontal" group="false">
              <style branchmargin="100" branchradius="25" linktype="curved" linkwidth="4" linkarrow="false" linkdash="longdash" nodeborder="underlined" nodewidth="622" nodeborderwidth="4" nodefill="false" nodemargin="8" nodepadding="6" nodefont="Sans 11" nodemarkup="true"/>
              <nodename maxwidth="632.90625">
                <text data="A constructor reference is a special type of method reference that uses `new` instead of a&#10;method and instantiates an object."/>
              </nodename>
              <nodenote></nodenote>
            </node>
            <node id="28" posx="852.75390625" posy="1045.3359375" width="554" height="205" side="right" fold="false" treesize="205" color="#3689e6" colorroot="false" summarized="false" layout="Horizontal" group="false">
              <style branchmargin="100" branchradius="25" linktype="curved" linkwidth="4" linkarrow="false" linkdash="longdash" nodeborder="underlined" nodewidth="622" nodeborderwidth="4" nodefill="false" nodemargin="8" nodepadding="6" nodefont="Sans 11" nodemarkup="true"/>
              <nodename maxwidth="622">
                <text data="`interface EmptyStringCreator {&#10; **String create();**&#10;}`&#10;    To call this, we use `new` as if it were a method name:&#10;`30: EmptyStringCreator methodRef =**String::new;**&#10;31: EmptyStringCreator lambda = ()-&gt; new String();&#10;32:&#10;33: var myString = methodRef.create();&#10;34: System.out.println(myString.equals(&quot;Snake&quot;)); // false`"/>
              </nodename>
              <nodenote></nodenote>
            </node>
            <node id="29" posx="852.75390625" posy="1250.3359374999998" width="640" height="226" side="right" fold="false" treesize="226" color="#3689e6" colorroot="false" summarized="false" layout="Horizontal" group="false">
              <style branchmargin="100" branchradius="25" linktype="curved" linkwidth="4" linkarrow="false" linkdash="longdash" nodeborder="underlined" nodewidth="622" nodeborderwidth="4" nodefill="false" nodemargin="8" nodepadding="6" nodefont="Sans 11" nodemarkup="true"/>
              <nodename maxwidth="622">
                <text data="`interface StringCopier {&#10; **String copy(String value);**&#10;}`&#10;In the implementation, notice that line 32 in the following example has the same method&#10;reference as line 30 in the previous example:&#10;`32: StringCopier methodRef =**String::new;**&#10;33: StringCopier lambda = x-&gt;new String(x);&#10;34:&#10;35: var myString = methodRef.copy(&quot;Zebra&quot;);&#10;36: System.out.println(myString.equals(&quot;Zebra&quot;)); // true`"/>
              </nodename>
              <nodenote></nodenote>
              <nodes>
                <node id="30" posx="1592.75390625" posy="1307.3359374999998" width="621" height="112" side="right" fold="false" treesize="112" color="#3689e6" colorroot="false" summarized="false" layout="Horizontal" group="false">
                  <style branchmargin="100" branchradius="25" linktype="curved" linkwidth="4" linkarrow="false" linkdash="longdash" nodeborder="underlined" nodewidth="620" nodeborderwidth="4" nodefill="false" nodemargin="8" nodepadding="6" nodefont="Sans 11" nodemarkup="true"/>
                  <nodename maxwidth="617.39062499999977">
                    <text data="This means you can&#x2019;t always determine which method can be called by looking at the&#10;method reference. Instead, you have to look at the context to see what parameters are used and if there is a return type. In this example, Java sees that we are passing a `String` parameter and calls the constructor of `String` that takes such a parameter."/>
                  </nodename>
                  <nodenote></nodenote>
                </node>
              </nodes>
            </node>
          </nodes>
        </node>
      </nodes>
    </node>
  </nodes>
  <groups/>
  <stickers/>
  <nodelinks id="0"/>
</minder>

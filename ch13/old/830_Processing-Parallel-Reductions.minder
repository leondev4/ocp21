<?xml version="1.0"?>
<minder version="1.16.2" parent-etag="1075404098" etag="2910582278">
  <theme name="default" label="Light" index="3"/>
  <styles>
    <style level="0" isset="true" branchmargin="100" branchradius="25" linktype="curved" linkwidth="4" linkarrow="false" linkdash="shortdash" nodeborder="rounded" nodewidth="200" nodeborderwidth="4" nodefill="false" nodemargin="10" nodepadding="10" nodefont="Sans 11" nodemarkup="true" connectiondash="dotted" connectionlwidth="2" connectionarrow="fromto" connectionpadding="3" connectionfont="Sans 10" connectiontwidth="100" calloutfont="Sans 12" calloutpadding="5" calloutptrwidth="20" calloutptrlength="20"/>
    <style level="1" isset="true" branchmargin="100" branchradius="25" linktype="curved" linkwidth="4" linkarrow="false" linkdash="shortdash" nodeborder="underlined" nodewidth="200" nodeborderwidth="4" nodefill="false" nodemargin="8" nodepadding="6" nodefont="Sans 11" nodemarkup="true" connectiondash="dotted" connectionlwidth="2" connectionarrow="fromto" connectionpadding="3" connectionfont="Sans 10" connectiontwidth="100" calloutfont="Sans 12" calloutpadding="5" calloutptrwidth="20" calloutptrlength="20"/>
    <style level="2" isset="true" branchmargin="100" branchradius="25" linktype="curved" linkwidth="4" linkarrow="false" linkdash="shortdash" nodeborder="underlined" nodewidth="200" nodeborderwidth="4" nodefill="false" nodemargin="8" nodepadding="6" nodefont="Sans 11" nodemarkup="true" connectiondash="dotted" connectionlwidth="2" connectionarrow="fromto" connectionpadding="3" connectionfont="Sans 10" connectiontwidth="100" calloutfont="Sans 12" calloutpadding="5" calloutptrwidth="20" calloutptrlength="20"/>
    <style level="3" isset="true" branchmargin="100" branchradius="25" linktype="curved" linkwidth="4" linkarrow="false" linkdash="shortdash" nodeborder="underlined" nodewidth="200" nodeborderwidth="4" nodefill="false" nodemargin="8" nodepadding="6" nodefont="Sans 11" nodemarkup="true" connectiondash="dotted" connectionlwidth="2" connectionarrow="fromto" connectionpadding="3" connectionfont="Sans 10" connectiontwidth="100" calloutfont="Sans 12" calloutpadding="5" calloutptrwidth="20" calloutptrlength="20"/>
    <style level="4" isset="true" branchmargin="100" branchradius="25" linktype="curved" linkwidth="4" linkarrow="false" linkdash="shortdash" nodeborder="underlined" nodewidth="200" nodeborderwidth="4" nodefill="false" nodemargin="8" nodepadding="6" nodefont="Sans 11" nodemarkup="true" connectiondash="dotted" connectionlwidth="2" connectionarrow="fromto" connectionpadding="3" connectionfont="Sans 10" connectiontwidth="100" calloutfont="Sans 12" calloutpadding="5" calloutptrwidth="20" calloutptrlength="20"/>
    <style level="5" isset="true" branchmargin="100" branchradius="25" linktype="curved" linkwidth="4" linkarrow="false" linkdash="shortdash" nodeborder="underlined" nodewidth="200" nodeborderwidth="4" nodefill="false" nodemargin="8" nodepadding="6" nodefont="Sans 11" nodemarkup="true" connectiondash="dotted" connectionlwidth="2" connectionarrow="fromto" connectionpadding="3" connectionfont="Sans 10" connectiontwidth="100" calloutfont="Sans 12" calloutpadding="5" calloutptrwidth="20" calloutptrlength="20"/>
    <style level="6" isset="true" branchmargin="100" branchradius="25" linktype="curved" linkwidth="4" linkarrow="false" linkdash="shortdash" nodeborder="underlined" nodewidth="200" nodeborderwidth="4" nodefill="false" nodemargin="8" nodepadding="6" nodefont="Sans 11" nodemarkup="true" connectiondash="dotted" connectionlwidth="2" connectionarrow="fromto" connectionpadding="3" connectionfont="Sans 10" connectiontwidth="100" calloutfont="Sans 12" calloutpadding="5" calloutptrwidth="20" calloutptrlength="20"/>
    <style level="7" isset="true" branchmargin="100" branchradius="25" linktype="curved" linkwidth="4" linkarrow="false" linkdash="shortdash" nodeborder="underlined" nodewidth="200" nodeborderwidth="4" nodefill="false" nodemargin="8" nodepadding="6" nodefont="Sans 11" nodemarkup="true" connectiondash="dotted" connectionlwidth="2" connectionarrow="fromto" connectionpadding="3" connectionfont="Sans 10" connectiontwidth="100" calloutfont="Sans 12" calloutpadding="5" calloutptrwidth="20" calloutptrlength="20"/>
    <style level="8" isset="true" branchmargin="100" branchradius="25" linktype="curved" linkwidth="4" linkarrow="false" linkdash="shortdash" nodeborder="underlined" nodewidth="200" nodeborderwidth="4" nodefill="false" nodemargin="8" nodepadding="6" nodefont="Sans 11" nodemarkup="true" connectiondash="dotted" connectionlwidth="2" connectionarrow="fromto" connectionpadding="3" connectionfont="Sans 10" connectiontwidth="100" calloutfont="Sans 12" calloutpadding="5" calloutptrwidth="20" calloutptrlength="20"/>
    <style level="9" isset="true" branchmargin="100" branchradius="25" linktype="curved" linkwidth="4" linkarrow="false" linkdash="shortdash" nodeborder="underlined" nodewidth="200" nodeborderwidth="4" nodefill="false" nodemargin="8" nodepadding="6" nodefont="Sans 11" nodemarkup="true" connectiondash="dotted" connectionlwidth="2" connectionarrow="fromto" connectionpadding="3" connectionfont="Sans 10" connectiontwidth="100" calloutfont="Sans 12" calloutpadding="5" calloutptrwidth="20" calloutptrlength="20"/>
    <style level="10" isset="true" branchmargin="100" branchradius="25" linktype="curved" linkwidth="4" linkarrow="false" linkdash="shortdash" nodeborder="underlined" nodewidth="200" nodeborderwidth="4" nodefill="false" nodemargin="8" nodepadding="6" nodefont="Sans 11" nodemarkup="true" connectiondash="dotted" connectionlwidth="2" connectionarrow="fromto" connectionpadding="3" connectionfont="Sans 10" connectiontwidth="100" calloutfont="Sans 12" calloutpadding="5" calloutptrwidth="20" calloutptrlength="20"/>
  </styles>
  <images/>
  <nodes>
    <node id="0" posx="647" posy="399.5" width="180" height="70" side="left" fold="false" treesize="1548.75" summarized="false" layout="Horizontal" group="false">
      <style branchmargin="100" branchradius="25" linktype="curved" linkwidth="4" linkarrow="false" linkdash="shortdash" nodeborder="underlined" nodewidth="200" nodeborderwidth="4" nodefill="false" nodemargin="8" nodepadding="6" nodefont="Sans 11" nodemarkup="true"/>
      <nodename maxwidth="200">
        <text data="**Processing Parallel Reductions**"/>
      </nodename>
      <nodenote></nodenote>
      <nodes>
        <node id="1" posx="927" posy="-338.75" width="640" height="70" side="right" fold="false" treesize="70" color="#c6262e" colorroot="false" summarized="false" layout="Horizontal" group="false">
          <style branchmargin="100" branchradius="25" linktype="curved" linkwidth="4" linkarrow="false" linkdash="shortdash" nodeborder="underlined" nodewidth="622" nodeborderwidth="4" nodefill="false" nodemargin="8" nodepadding="6" nodefont="Sans 11" nodemarkup="true"/>
          <nodename maxwidth="642.0703125">
            <text data=" A _parallel reduction_ is a reduction operation applied to a parallel stream. The results for parallel reductions can differ from what you expect when working with serial streams."/>
          </nodename>
          <nodenote></nodenote>
        </node>
        <node id="2" posx="927" posy="-79.75" width="283" height="49" side="right" fold="false" treesize="427" color="#f37329" colorroot="false" summarized="false" layout="Horizontal" group="false">
          <style branchmargin="100" branchradius="25" linktype="curved" linkwidth="4" linkarrow="false" linkdash="shortdash" nodeborder="underlined" nodewidth="622" nodeborderwidth="4" nodefill="false" nodemargin="8" nodepadding="6" nodefont="Sans 11" nodemarkup="true"/>
          <nodename maxwidth="622">
            <text data="**Performing Order-&#xAD;Based Tasks**"/>
          </nodename>
          <nodenote></nodenote>
          <nodes>
            <node id="3" posx="1310" posy="-268.75" width="503" height="70" side="right" fold="false" treesize="70" color="#f37329" colorroot="false" summarized="false" layout="Horizontal" group="false">
              <style branchmargin="100" branchradius="25" linktype="curved" linkwidth="4" linkarrow="false" linkdash="shortdash" nodeborder="underlined" nodewidth="503" nodeborderwidth="4" nodefill="false" nodemargin="8" nodepadding="6" nodefont="Sans 11" nodemarkup="true"/>
              <nodename maxwidth="483.763671875">
                <text data="Since order is not guaranteed with parallel streams, methods such as `findAny()` on parallel streams may result in unexpected behavior. "/>
              </nodename>
              <nodenote></nodenote>
            </node>
            <node id="4" posx="1310" posy="-185.25" width="365" height="106" side="right" fold="false" treesize="133" color="#f37329" colorroot="false" summarized="false" layout="Horizontal" group="false">
              <style branchmargin="100" branchradius="25" linktype="curved" linkwidth="4" linkarrow="false" linkdash="shortdash" nodeborder="underlined" nodewidth="503" nodeborderwidth="4" nodefill="false" nodemargin="8" nodepadding="6" nodefont="Sans 11" nodemarkup="true"/>
              <nodename maxwidth="503">
                <text data="`System.out.print(List.of(1,2,3,4,5,6)&#10;**.parallelStream()**&#10;**.findAny()**&#10;  .get());`"/>
              </nodename>
              <nodenote></nodenote>
              <nodes>
                <node id="5" posx="1775" posy="-198.75" width="524" height="133" side="right" fold="false" treesize="133" color="#f37329" colorroot="false" summarized="false" layout="Horizontal" group="false">
                  <style branchmargin="100" branchradius="25" linktype="curved" linkwidth="4" linkarrow="false" linkdash="shortdash" nodeborder="underlined" nodewidth="503" nodeborderwidth="4" nodefill="false" nodemargin="8" nodepadding="6" nodefont="Sans 11" nodemarkup="true"/>
                  <nodename maxwidth="503">
                    <text data="The JVM allocates a number of threads and returns the value of the first one to return a result, which could be `4`, `2`, and so on. While _neither_ the serial nor the parallel stream is guaranteed to return the first value, the serial stream often does. With a parallel stream, the results are likely to be more random."/>
                  </nodename>
                  <nodenote></nodenote>
                </node>
              </nodes>
            </node>
            <node id="7" posx="1310" posy="-65.75" width="525" height="112" side="right" fold="false" treesize="112" color="#68b723" colorroot="true" summarized="false" layout="Horizontal" group="false">
              <style branchmargin="100" branchradius="25" linktype="curved" linkwidth="4" linkarrow="false" linkdash="shortdash" nodeborder="pilled" nodewidth="503" nodeborderwidth="4" nodefill="true" nodemargin="8" nodepadding="6" nodefont="Sans 11" nodemarkup="true"/>
              <nodename maxwidth="503">
                <text data="What about operations that consider order, such as `findFirst()`, `limit()`, and `skip()` ? Order is still preserved, but performance may suffer on a parallel stream as a result of a parallel processing task being forced to coordinate all of its threads in a synchronized-&#xAD;like fashion."/>
              </nodename>
              <nodenote></nodenote>
              <nodes>
                <node id="8" posx="1935" posy="-65.75" width="412" height="112" side="right" fold="false" treesize="112" color="#68b723" colorroot="false" summarized="false" layout="Horizontal" group="false">
                  <style branchmargin="100" branchradius="25" linktype="curved" linkwidth="4" linkarrow="false" linkdash="shortdash" nodeborder="pilled" nodewidth="415" nodeborderwidth="4" nodefill="true" nodemargin="8" nodepadding="6" nodefont="Sans 11" nodemarkup="true"/>
                  <nodename maxwidth="392.7978515625">
                    <text data="The results of ordered operations on a parallel stream will be consistent with a serial stream. For example, calling `skip(5).limit(2).findFirst()` will return the same result on ordered serial and parallel streams."/>
                  </nodename>
                  <nodenote></nodenote>
                </node>
              </nodes>
            </node>
            <node id="9" posx="1310" posy="46.25" width="531" height="112" side="right" fold="false" treesize="112" color="#f37329" colorroot="false" summarized="false" layout="Horizontal" group="false">
              <style branchmargin="100" branchradius="25" linktype="curved" linkwidth="4" linkarrow="false" linkdash="shortdash" nodeborder="underlined" nodewidth="503" nodeborderwidth="4" nodefill="false" nodemargin="8" nodepadding="6" nodefont="Sans 11" nodemarkup="true"/>
              <nodename maxwidth="503">
                <text data="All of the streams you have been working with are considered ordered by default. It is possible to create an unordered stream from an ordered stream, similar to how you create a parallel stream from a serial stream.&#10;`List.of(1,2,3,4,5,6).stream().unordered();`"/>
              </nodename>
              <nodenote></nodenote>
            </node>
          </nodes>
        </node>
        <node id="10" posx="927" posy="454.75" width="318" height="49" side="right" fold="false" treesize="642" color="#f9c440" colorroot="false" summarized="false" layout="Horizontal" group="false">
          <style branchmargin="100" branchradius="25" linktype="curved" linkwidth="4" linkarrow="false" linkdash="shortdash" nodeborder="underlined" nodewidth="622" nodeborderwidth="4" nodefill="false" nodemargin="8" nodepadding="6" nodefont="Sans 11" nodemarkup="true"/>
          <nodename maxwidth="622">
            <text data="**Combining Results with `reduce()`**"/>
          </nodename>
          <nodenote></nodenote>
          <nodes>
            <node id="11" posx="1345" posy="167.25" width="438" height="70" side="right" fold="false" treesize="88" color="#f9c440" colorroot="false" summarized="false" layout="Horizontal" group="false">
              <style branchmargin="100" branchradius="25" linktype="curved" linkwidth="4" linkarrow="false" linkdash="shortdash" nodeborder="underlined" nodewidth="622" nodeborderwidth="4" nodefill="false" nodemargin="8" nodepadding="6" nodefont="Sans 11" nodemarkup="true"/>
              <nodename maxwidth="622">
                <text data="The stream operation `reduce()` combines a stream into a&#10;single object. "/>
              </nodename>
              <nodenote></nodenote>
              <nodes>
                <node id="12" posx="1883" posy="158.25" width="460" height="88" side="right" fold="false" treesize="88" color="#f9c440" colorroot="false" summarized="false" layout="Horizontal" group="false">
                  <style branchmargin="100" branchradius="25" linktype="curved" linkwidth="4" linkarrow="false" linkdash="shortdash" nodeborder="underlined" nodewidth="622" nodeborderwidth="4" nodefill="false" nodemargin="8" nodepadding="6" nodefont="Sans 11" nodemarkup="true"/>
                  <nodename maxwidth="622">
                    <text data="`&lt;U&gt; U reduce(U **identity**,&#10;    _BiFunction_&lt;U,? super T,U&gt; **accumulator**,&#10;    _BinaryOperator_&lt;U&gt; **combiner**)`"/>
                  </nodename>
                  <nodenote></nodenote>
                </node>
              </nodes>
            </node>
            <node id="13" posx="1345" posy="264.75" width="446" height="124" side="right" fold="false" treesize="161" color="#f9c440" colorroot="false" summarized="false" layout="Horizontal" group="false">
              <style branchmargin="100" branchradius="25" linktype="curved" linkwidth="4" linkarrow="false" linkdash="shortdash" nodeborder="underlined" nodewidth="622" nodeborderwidth="4" nodefill="false" nodemargin="8" nodepadding="6" nodefont="Sans 11" nodemarkup="true"/>
              <nodename maxwidth="622">
                <text data="`System.out.println(List.of('w', 'o', 'l', 'f')&#10;  .parallelStream()&#10;  .reduce(**&quot;&quot;**,&#10;  **(s1,c) -&gt; s1 + c**,&#10;  **(s2,s3) -&gt; s2 + s3)**); // wolf`"/>
              </nodename>
              <nodenote></nodenote>
              <nodes>
                <node id="14" posx="1891" posy="246.25" width="520" height="49" side="right" fold="false" treesize="49" color="#f9c440" colorroot="false" summarized="false" layout="Horizontal" group="false">
                  <style branchmargin="100" branchradius="25" linktype="curved" linkwidth="4" linkarrow="false" linkdash="shortdash" nodeborder="underlined" nodewidth="622" nodeborderwidth="4" nodefill="false" nodemargin="8" nodepadding="6" nodefont="Sans 11" nodemarkup="true"/>
                  <nodename maxwidth="622">
                    <text data="We used `c` for `char` , whereas `s1`, `s2`, and `s3` are `String` values."/>
                  </nodename>
                  <nodenote></nodenote>
                </node>
                <node id="15" posx="1891" posy="295.25" width="606" height="112" side="right" fold="false" treesize="112" color="#f9c440" colorroot="false" summarized="false" layout="Horizontal" group="false">
                  <style branchmargin="100" branchradius="25" linktype="curved" linkwidth="4" linkarrow="false" linkdash="shortdash" nodeborder="underlined" nodewidth="622" nodeborderwidth="4" nodefill="false" nodemargin="8" nodepadding="6" nodefont="Sans 11" nodemarkup="true"/>
                  <nodename maxwidth="622">
                    <text data="Applying the reduction to pairs of elements within the stream to create intermediate values and then combining those intermediate values to produce a final result.&#10;In a serial stream, `wolf` is built one character at a time. In a parallel stream, the intermediate values `wo` and `lf` are created and then combined."/>
                  </nodename>
                  <nodenote></nodenote>
                </node>
              </nodes>
            </node>
            <node id="16" posx="1345" posy="558.25" width="517" height="91" side="right" fold="false" treesize="393.00000000000006" color="#f9c440" colorroot="false" summarized="false" layout="Horizontal" group="false">
              <style branchmargin="100" branchradius="25" linktype="curved" linkwidth="4" linkarrow="false" linkdash="shortdash" nodeborder="underlined" nodewidth="622" nodeborderwidth="4" nodefill="false" nodemargin="8" nodepadding="6" nodefont="Sans 11" nodemarkup="true"/>
              <nodename maxwidth="622">
                <text data="What if the elements of a string are combined in the wrong order?&#10;Make sure that the accumulator and combiner produce the same result&#10;regardless of the order they are called in."/>
              </nodename>
              <nodenote></nodenote>
              <nodes>
                <node id="18" posx="1962" posy="407.25" width="444" height="70" side="right" fold="false" treesize="70" color="#f9c440" colorroot="false" summarized="false" layout="Horizontal" group="false">
                  <style branchmargin="100" branchradius="25" linktype="curved" linkwidth="4" linkarrow="false" linkdash="shortdash" nodeborder="underlined" nodewidth="622" nodeborderwidth="4" nodefill="false" nodemargin="8" nodepadding="6" nodefont="Sans 11" nodemarkup="true"/>
                  <nodename maxwidth="622">
                    <text data="If you violate these rules is much more likely to produce side&#10;effects or unpredictable results."/>
                  </nodename>
                  <nodenote></nodenote>
                </node>
                <node id="19" posx="1962" posy="477.25" width="640" height="172" side="right" fold="false" treesize="172.00000000000006" color="#f9c440" colorroot="false" summarized="false" layout="Horizontal" group="false">
                  <style branchmargin="100" branchradius="25" linktype="curved" linkwidth="4" linkarrow="false" linkdash="shortdash" nodeborder="underlined" nodewidth="622" nodeborderwidth="4" nodefill="false" nodemargin="8" nodepadding="6" nodefont="Sans 11" nodemarkup="true"/>
                  <nodename maxwidth="622">
                    <text data="Let&#x2019;s take a look at an example using a problematic accumulator. In particular, order mat-&#10;ters when subtracting numbers; therefore, the following code can output different values&#10;depending on whether you use a serial or parallel stream. &#10;`System.out.println(List.of(1,2,3,4,5,6)&#10;  .parallelStream()&#10;  .reduce(0, **(a, b) -&gt; (a -&#xAD;b)**)); // PROBLEMATIC ACCUMULATOR`&#10;It may output `-&#xAD;21`, `3`, or some other value."/>
                  </nodename>
                  <nodenote></nodenote>
                </node>
                <node id="21" posx="1962" posy="649.25" width="770" height="151" side="right" fold="false" treesize="151" color="#f9c440" colorroot="false" summarized="false" layout="Horizontal" group="false">
                  <style branchmargin="100" branchradius="25" linktype="curved" linkwidth="4" linkarrow="false" linkdash="shortdash" nodeborder="underlined" nodewidth="785" nodeborderwidth="4" nodefill="false" nodemargin="8" nodepadding="6" nodefont="Sans 11" nodemarkup="true"/>
                  <nodename maxwidth="800.47920735677087">
                    <text data="You can see other problems if we use an identity parameter that is not truly an identity value. &#10;`System.out.println(List.of(&quot;w&quot;,&quot;o&quot;,&quot;l&quot;,&quot;f&quot;)&#10;    .parallelStream()&#10;    .reduce(**&quot;X&quot;**, String::concat)); // XwXoXlXf`&#10;On a serial stream, it prints `Xwolf`, but on a parallel stream, the result is `XwXoXlXf`. As part of the parallel process, the identity is applied to multiple elements in the stream, resulting in very unexpected data."/>
                  </nodename>
                  <nodenote></nodenote>
                </node>
              </nodes>
            </node>
          </nodes>
        </node>
        <node id="22" posx="927" posy="979.5" width="327" height="49" side="right" fold="false" treesize="407.5" color="#68b723" colorroot="false" summarized="false" layout="Horizontal" group="false">
          <style branchmargin="100" branchradius="25" linktype="curved" linkwidth="4" linkarrow="false" linkdash="shortdash" nodeborder="underlined" nodewidth="622" nodeborderwidth="4" nodefill="false" nodemargin="8" nodepadding="6" nodefont="Sans 11" nodemarkup="true"/>
          <nodename maxwidth="622">
            <text data="**Combining Results with `collect()`**"/>
          </nodename>
          <nodenote></nodenote>
          <nodes>
            <node id="23" posx="1354" posy="811.5" width="678" height="70" side="right" fold="false" treesize="88" color="#68b723" colorroot="false" summarized="false" layout="Horizontal" group="false">
              <style branchmargin="100" branchradius="25" linktype="curved" linkwidth="4" linkarrow="false" linkdash="shortdash" nodeborder="underlined" nodewidth="651" nodeborderwidth="4" nodefill="false" nodemargin="8" nodepadding="6" nodefont="Sans 11" nodemarkup="true"/>
              <nodename maxwidth="659.75260416666663">
                <text data="Like `reduce()`, the Stream API includes a three-&#xAD;argument version of `collect()` that takes _accumulator_ and _combiner_ operators along with a _supplier_ operator instead of an identity."/>
              </nodename>
              <nodenote></nodenote>
              <nodes>
                <node id="24" posx="2132" posy="802.5" width="415" height="88" side="right" fold="false" treesize="88" color="#68b723" colorroot="false" summarized="false" layout="Horizontal" group="false">
                  <style branchmargin="100" branchradius="25" linktype="curved" linkwidth="4" linkarrow="false" linkdash="shortdash" nodeborder="underlined" nodewidth="651" nodeborderwidth="4" nodefill="false" nodemargin="8" nodepadding="6" nodefont="Sans 11" nodemarkup="true"/>
                  <nodename maxwidth="651">
                    <text data="`&lt;R&gt; R collect(Supplier&lt;R&gt; **supplier**,&#10;  BiConsumer&lt;R, ? super T&gt; **accumulator**,&#10;  BiConsumer&lt;R, R&gt; **combiner**)`"/>
                  </nodename>
                  <nodenote></nodenote>
                </node>
              </nodes>
            </node>
            <node id="25" posx="1354" posy="890.5" width="639" height="91" side="right" fold="false" treesize="91" color="#68b723" colorroot="false" summarized="false" layout="Horizontal" group="false">
              <style branchmargin="100" branchradius="25" linktype="curved" linkwidth="4" linkarrow="false" linkdash="shortdash" nodeborder="underlined" nodewidth="651" nodeborderwidth="4" nodefill="false" nodemargin="8" nodepadding="6" nodefont="Sans 11" nodemarkup="true"/>
              <nodename maxwidth="651">
                <text data="Also, like `reduce()`, the accumulator and combiner operations must be able to process&#10;results in any order.  In this manner, the three-&#xAD;argument version of `collect()` can be performed as a parallel reduction,"/>
              </nodename>
              <nodenote></nodenote>
            </node>
            <node id="26" posx="1354" posy="1031.5" width="658" height="124" side="right" fold="false" treesize="224" color="#68b723" colorroot="false" summarized="false" layout="Horizontal" group="false">
              <style branchmargin="100" branchradius="25" linktype="curved" linkwidth="4" linkarrow="false" linkdash="shortdash" nodeborder="underlined" nodewidth="651" nodeborderwidth="4" nodefill="false" nodemargin="8" nodepadding="6" nodefont="Sans 11" nodemarkup="true"/>
              <nodename maxwidth="651">
                <text data="`Stream&lt;String&gt; stream = Stream.of(&quot;w&quot;, &quot;o&quot;, &quot;l&quot;, &quot;f&quot;).**parallel()**;&#10;SortedSet&lt;String&gt; set = stream.collect(**ConcurrentSkipListSet::new**,&#10;**Set::add**,&#10;**Set::addAll**);&#10;System.out.println(set); // [f, l, o, w]`"/>
              </nodename>
              <nodenote></nodenote>
              <nodes>
                <node id="27" posx="2112" posy="981.5" width="649" height="91" side="right" fold="false" treesize="91" color="#68b723" colorroot="false" summarized="false" layout="Horizontal" group="false">
                  <style branchmargin="100" branchradius="25" linktype="curved" linkwidth="4" linkarrow="false" linkdash="shortdash" nodeborder="underlined" nodewidth="651" nodeborderwidth="4" nodefill="false" nodemargin="8" nodepadding="6" nodefont="Sans 11" nodemarkup="true"/>
                  <nodename maxwidth="651">
                    <text data="Recall that elements in a `ConcurrentSkipListSet` are sorted according to their natural&#10;ordering. You should use a concurrent collection to combine the results, ensuring that the&#10;results of concurrent threads do not cause a `ConcurrentModificationException`."/>
                  </nodename>
                  <nodenote></nodenote>
                </node>
                <node id="28" posx="2112" posy="1072.5" width="672" height="133" side="right" fold="false" treesize="133" color="#68b723" colorroot="false" summarized="false" layout="Horizontal" group="false">
                  <style branchmargin="100" branchradius="25" linktype="curved" linkwidth="4" linkarrow="false" linkdash="shortdash" nodeborder="underlined" nodewidth="651" nodeborderwidth="4" nodefill="false" nodemargin="8" nodepadding="6" nodefont="Sans 11" nodemarkup="true"/>
                  <nodename maxwidth="651">
                    <text data="Performing parallel reductions with a collector requires additional considerations. For&#10;example, if the collection into which you are inserting is an ordered data set, such as a `List`,&#10;the elements in the resulting collection must be in the same order, regardless of whether you&#10;use a serial or parallel stream. This may reduce performance, though, as some operations&#10;cannot be completed in parallel."/>
                  </nodename>
                  <nodenote></nodenote>
                </node>
              </nodes>
            </node>
          </nodes>
        </node>
      </nodes>
    </node>
  </nodes>
  <groups/>
  <stickers/>
  <nodelinks id="0"/>
</minder>
